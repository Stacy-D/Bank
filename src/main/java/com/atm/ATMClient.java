package com.atm;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintStream;
import java.net.InetAddress;
import java.net.Socket;
import java.util.Observable;
import java.util.Observer;
import java.util.logging.Logger;

import javax.swing.*;

/**
 * ATM client for BankManager
 * @author Stacy
 * @author Ivan Polomani
 */
public class ATMClient {
	
	static class BankAccess extends Observable
	{
		private static final Logger LOG = Logger.getLogger(BankAccess.class.getName());
		public BankAccess(InetAddress addr, int port)
		{
			try {
		         socket = new Socket(addr,port); 
		         os = new PrintStream(socket.getOutputStream());
		         in = new BufferedReader(new InputStreamReader(socket.getInputStream()));
		         
		         Thread receivingThread = new Thread(){
		        	 @Override
		        	 public void run()
		        	 {
		        		 try
		        		 {
		        			 String line;
		        			 while((line = in.readLine()) != null){
		        				 notifyObservers(line);
		        			 }

		        		 }
		        		 catch(IOException ex)
		        		 {
		        			 try {
			      		            socket.close();
			      		         }
			      		         catch (IOException e2) {
			      		            LOG.warning("Socket wasn`t closed");
			      		         }
		        		 }
		        	 }
		         };
		         receivingThread.start();
		         }
		      catch (IOException e) {
		         try {
		            socket.close();
		         }
		         catch (IOException e2) {
		            LOG.warning("Socket wasn`t closed");
		         }
		      }
		}
		
		@Override
		public void notifyObservers(Object arg)
		{
			super.setChanged();
			super.notifyObservers(arg);
		}
		public void getInfo(int cardNumber, String password)
		{
			String pass = EncryptPassword.encrypt(password);
			send("ATMGetinfo"+"CD"+cardNumber+ "PASS"+pass);
		}
		public void withdrawMoney(int cardNumber, String password,int withdraw)
		{
			String pass = EncryptPassword.encrypt(password);
			send("ATMWithdraw"+"CD"+cardNumber+ "PASS"+pass+"MINUS"+withdraw);
		}

		public void stopCommunication()
		{
			os.println("END_OF_SESSION");
			os.flush();
			try {
				socket.close();
			}
			catch (IOException e) {
				LOG.warning("Socket wasn`t closed");
			}
		}
		/**
		 * Send command to server and get it response
		 * @param command
		 */
		public void send(String command)
		{
			os.println(command);
			os.flush();
		}
		
		private BufferedReader in;
		private Socket socket;
		private PrintStream os;
	}

	static class ATM extends JFrame implements Observer {

	    /**
	     * Creates new form ATM
	     */
	    public ATM(BankAccess bank) {
	    	this.access = bank;
	    	this.access.addObserver(this);
	        initComponents();
	    }

	    /**
	     * This method is called from within the constructor to initialize the form.
	     * WARNING: Do NOT modify this code. The content of this method is always
	     * regenerated by the Form Editor.
	     */
	    @SuppressWarnings("unchecked")
	    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
	    private void initComponents() {

	        mainPanel = new JPanel();
	        jMenuBar1 = new JMenuBar();
	        jMenu1 = new JMenu();
	        jMenuItem1 = new JMenuItem();
	        atmPanel = new ATMPanel(access);
	        access.addObserver(atmPanel);

	        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);

	        mainPanel.add(atmPanel);
	        this.add(mainPanel);
	        
	        jMenu1.setText("Action");

	        jMenuItem1.setText("Exit");
	        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
	            public void actionPerformed(java.awt.event.ActionEvent evt) {
	                jMenuItem1ActionPerformed(evt);
	            }
	        });
	        jMenu1.add(jMenuItem1);

	        jMenuBar1.add(jMenu1);

	        setJMenuBar(jMenuBar1);

	        pack();
	    }// </editor-fold>                        
                                                                                

	    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {                                           
	    	access.stopCommunication();
	    	dispose();
	    }                                                                                  

	    @Override
		public void update(Observable arg0, Object arg1) {
			// TODO Auto-generated method stub
			
		}  
	    
	    private ATMPanel atmPanel;
	    private BankAccess access;
	    private JMenu jMenu1;
	    private JMenuBar jMenuBar1;
	    private JMenuItem jMenuItem1;
	    private JPanel mainPanel;           
	}
	
	public static void startBankAccess(InetAddress addr, int port)
	{
		final int fport = port;
		final BankAccess  access = new BankAccess(addr, port);
		 java.awt.EventQueue.invokeLater(new Runnable() {
	            public void run() {
		JFrame frame = new ATM(access);
		frame.setTitle("Connected to BankManager at port: "+fport);
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		frame.pack();
		frame.setLocationRelativeTo(null);
		frame.setResizable(false);
		frame.setVisible(true);
	            }
		 });
	}

}
